/// @filename PluginEditor.cpp
/// @brief InstantSonicView plugin editor (UI & control)
/// @author gm
/// @copyright gm 2014
///
/// This file is part of InstantSonicView
///
/// InstantSonicView is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// InstantSonicView is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with InstantSonicView.  If not, see <http://www.gnu.org/licenses/>.


// This file is NOT generated by Juce (at least not after the first time),
// That's why we apply our coding style here

#include "instantsonicview/implementation/plugin/vst/PluginEditor.h"

#include "instantsonicview/src/common.h"
#include "instantsonicview/src/analyzer/features.h"

InstantSonicViewAudioProcessorEditor::InstantSonicViewAudioProcessorEditor(
    InstantSonicViewAudioProcessor* owner)
    : AudioProcessorEditor(owner),
      audio_display_(),
      recordingThumbnail(),
      recorder(recordingThumbnail.getAudioThumbnail()),
      recordButton("Record"),
      debug_infos_() {
  addAndMakeVisible(&audio_display_);
  getProcessor()->addChangeListener(&audio_display_);

  addAndMakeVisible (recordingThumbnail);

  getProcessor()->addChangeListener(&recorder);

  addAndMakeVisible (recordButton);
  recordButton.addListener (this);
  recordButton.setColour (TextButton::buttonColourId, Colour (0xffff5c5c));
  recordButton.setColour (TextButton::textColourOnId, Colours::black);

  // DEBUG
  addAndMakeVisible(&debug_infos_);
  this->startTimer(kTimerInterval);
  //  /DEBUG

  getProcessor()->addChangeListener(this);
  // This is where our plugin's editor size is set.
  setSize(kMainWindowSizeX, kMainWindowSizeY);
}

InstantSonicViewAudioProcessorEditor::~InstantSonicViewAudioProcessorEditor() {
  getProcessor()->removeChangeListener(&audio_display_);
  getProcessor()->removeChangeListener(&recorder);
  getProcessor()->removeChangeListener(this);
}

void InstantSonicViewAudioProcessorEditor::paint(juce::Graphics& g) {
  g.fillAll(Colours::white);
}

void InstantSonicViewAudioProcessorEditor::resized(void) {
  Rectangle<int> area(getLocalBounds());

  audio_display_.setBounds(area.removeFromTop(getHeight() / 8).reduced(8));
  recordingThumbnail.setBounds(area.removeFromTop(getHeight() / 4).reduced(8));
  recordButton.setBounds(area.removeFromTop(36).removeFromLeft(140).reduced(8));
  recordButton.setBounds(area.removeFromTop(72).removeFromLeft(140).reduced(8));

  // DEBUG
  debug_infos_.setBounds(area.removeFromTop(getHeight() / 8).reduced(8));
  //  /DEBUG
}

void InstantSonicViewAudioProcessorEditor::changeListenerCallback(
    juce::ChangeBroadcaster *source) {
  InstantSonicViewAudioProcessor* proc(getProcessor());
  // No other change broacaster than the processor for now!
  INSTANTSONICVIEW_ASSERT(source == proc);
}

void InstantSonicViewAudioProcessorEditor::timerCallback() {
  const double time(getProcessor()->GetLastProcessTime());
  debug_infos_.setText(juce::String(time));
}

void InstantSonicViewAudioProcessorEditor::buttonClicked(Button* button) {
  if (button == &recordButton) {
    if (recorder.isRecording())
      stopRecording();
    else
      startRecording();
  } else {
    // Should never happen
    INSTANTSONICVIEW_ASSERT(false);
  }
}

float InstantSonicViewAudioProcessorEditor::GetParamValue(const int param_id) {
  return getProcessor()->getParameter(param_id);
}

void InstantSonicViewAudioProcessorEditor::ParamValueChanged(const int param_id,
                                                     const float value) {
  getProcessor()->setParameterNotifyingHost(param_id, value);
}

void InstantSonicViewAudioProcessorEditor::ParamGestureBegan(const int param_id) {
  getProcessor()->beginParameterChangeGesture(param_id);
}

void InstantSonicViewAudioProcessorEditor::ParamGestureEnded(const int param_id) {
  getProcessor()->endParameterChangeGesture(param_id);
}

InstantSonicViewAudioProcessor* InstantSonicViewAudioProcessorEditor::getProcessor() const {
  return static_cast<InstantSonicViewAudioProcessor*>(getAudioProcessor());
}

void InstantSonicViewAudioProcessorEditor::startRecording() {
  const File file (File::getSpecialLocation (File::userDocumentsDirectory)
                      .getNonexistentChildFile ("Juce Demo Audio Recording", ".wav"));
  recorder.startRecording(file, getProcessor()->getSampleRate());

  recordButton.setButtonText ("Stop");
  recordingThumbnail.setDisplayFullThumbnail (false);
}

void InstantSonicViewAudioProcessorEditor::stopRecording() {
  recorder.stop();
  recordButton.setButtonText ("Record");
  recordingThumbnail.setDisplayFullThumbnail (true);
}
