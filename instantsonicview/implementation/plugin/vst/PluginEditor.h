/// @filename PluginEditor.h
/// @brief InstantSonicView plugin editor (UI & control)
/// @author gm
/// @copyright gm 2014
///
/// This file is part of InstantSonicView
///
/// InstantSonicView is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// InstantSonicView is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with InstantSonicView.  If not, see <http://www.gnu.org/licenses/>.


// This file is NOT generated by Juce (at least not after the first time),
// That's why we apply our coding style here


#ifndef INSTANTSONICVIEW_PLUGIN_COMMON_PLUGINEDITOR_H_
#define INSTANTSONICVIEW_PLUGIN_COMMON_PLUGINEDITOR_H_

#include "JuceHeader.h"

#include "instantsonicview/implementation/common/AudioStream.h"
#include "instantsonicview/implementation/common/CurveDisplay.h"
#include "instantsonicview/implementation/common/LiveScrollingAudioDisplay.h"
#include "instantsonicview/implementation/common/RecordingThumbnail.h"
#include "instantsonicview/implementation/plugin/vst/PluginProcessor.h"

static const int kMainWindowSizeX(800);
static const int kMainWindowSizeY(600);

/// @brief Plugin "editor" class
///
/// Contains all UI and user control stuff
class InstantSonicViewAudioProcessorEditor : public juce::AudioProcessorEditor,
                                             public juce::ChangeListener,
                                             public juce::ChangeBroadcaster,
                                             public juce::Timer,
                                             public juce::Button::Listener,
                                             public juce::Slider::Listener {
 public:
  explicit InstantSonicViewAudioProcessorEditor(InstantSonicViewAudioProcessor* owner);
  ~InstantSonicViewAudioProcessorEditor();

  void paint(juce::Graphics& g);
  void resized();

  // Overrides from inherited classes
  void changeListenerCallback(juce::ChangeBroadcaster *source);
  void timerCallback();
  void buttonClicked(Button* button) override;
  void sliderValueChanged(Slider* slider) override;

  // Give access to parameter changes to other UI components
  float GetParamValue(const int param_id);
  void ParamValueChanged(const int param_id, const float value);
  void ParamGestureBegan(const int param_id);
  void ParamGestureEnded(const int param_id);

  /// @brief Retrieve an access to the audio processor
  InstantSonicViewAudioProcessor* getProcessor() const;

  void startRecording(void);
  void stopRecording(void);

  void startReplay(void);

  void startAnalysis(void);
  void HandleAnalysisData(void);

  void setDisplayGain(double value);
  void setThreshold(double value);

 private:
  CurveDisplay curve_display_;
  LiveScrollingAudioDisplay audio_display_;
  RecordingThumbnail recordingThumbnail;
  TextButton recordButton;
  TextButton replayButton;
  TextButton analyzeButton;
  Slider displayGain;
  Slider threshold;
  bool was_replaying_;
  bool analyzed_;
  instantsonicview::AudioStreamListenerManager audiostream_listener_manager_;

  juce::TextEditor debug_infos_;
  static const int kTimerInterval = 10;

  JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(InstantSonicViewAudioProcessorEditor)
};

#endif  // INSTANTSONICVIEW_PLUGIN_COMMON_PLUGINEDITOR_H_
