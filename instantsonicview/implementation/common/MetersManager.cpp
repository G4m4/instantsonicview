/// @filename MetersManager.cpp
/// @brief InstantSonicView meter widgets manager
/// @author gm
/// @copyright gm 2014
///
/// This file is part of InstantSonicView
///
/// InstantSonicView is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// InstantSonicView is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with InstantSonicView.  If not, see <http://www.gnu.org/licenses/>.


// This file is NOT generated by Juce (at least not after the first time),
// That's why we apply our coding style here

#include "instantsonicview/implementation/common/MetersManager.h"

#include "instantsonicview/implementation/plugin/vst/PluginEditor.h"

MetersManager::MetersManager(
    const std::array<FeatureMeta, kAvailableDescriptorsCount>& params) {
  // TODO(gm): try to move this into the constructor initializer list
  for (unsigned int param_id(0);
       param_id < params.size();
       ++param_id) {
    // Remember, the InstantSonicView parameter manager manages its id with:
    // - ids beginning at 0
    // - adjacent ids
    // hence the id matching a widget is its index in the array
    FeatureMeter* widget(new FeatureMeter(params[param_id]));
    addAndMakeVisible(widget);
    widgets_.add(widget);
  }
}

MetersManager::~MetersManager() {
  getEditor().removeChangeListener(this);
}

void MetersManager::paint(juce::Graphics& g) {
  int current_x(0);
  int current_y(0);
  const InstantSonicViewAudioProcessor* proc(getEditor().getProcessor());
  for (int param_id(0);
       param_id < widgets_.size();
       ++param_id) {
    FeatureMeter* widget(widgets_[param_id]);
    // Update feature values
    widget->setValue(proc->GetFeatureValue(param_id));
    widget->setBounds(current_x, current_y, kWidgetWidth, kWidgetHeight);
    current_y += kWidgetHeight;
    current_y += kWidgetMargin;
    if (current_y > kColumnHeight) {
      current_x += kColumnWidth;
      current_y = 0;
    }
  }
}

void MetersManager::changeListenerCallback(
    juce::ChangeBroadcaster *source) {
  // No other change broacaster than the processor for now!
  INSTANTSONICVIEW_ASSERT(&(getEditor()) == source);
  // Update UI components without sending back
  // notifications to the processor
  for (int param_id(0);
       param_id < widgets_.size();
       ++param_id) {
    FeatureMeter* widget = widgets_[param_id];
    widget->setValue(getEditor().GetParamValue(param_id));
  }
}

InstantSonicViewAudioProcessorEditor& MetersManager::getEditor(void) const {
  // Will throw if the downcast fails
  return dynamic_cast<InstantSonicViewAudioProcessorEditor&>(
    *(this->getParentComponent()));
}
