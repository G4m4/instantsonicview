/// @filename MetersManager.h
/// @brief InstantSonicView meter widgets manager
/// @author gm
/// @copyright gm 2014
///
/// This file is part of InstantSonicView
///
/// InstantSonicView is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// InstantSonicView is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with InstantSonicView.  If not, see <http://www.gnu.org/licenses/>.


// This file is NOT generated by Juce (at least not after the first time),
// That's why we apply our coding style here


#ifndef INSTANTSONICVIEW_IMPLEMENTATION_COMMON_METERSMANAGER_H_
#define INSTANTSONICVIEW_IMPLEMENTATION_COMMON_METERSMANAGER_H_

#include <array>

#include "JuceHeader.h"

#include "instantsonicview/src/analyzer/feature_meta.h"
#include "instantsonicview/src/analyzer/features.h"

#include "instantsonicview/implementation/common/FeatureMeter.h"

// Using declarations for InstantSonicView parameters
using instantsonicview::analyzer::FeatureMeta;
// Using directives for InstantSonicView parameters
using namespace instantsonicview::analyzer;

class InstantSonicViewAudioProcessorEditor;

/// @brief Feature meters manager
///
/// This component manages all "features meters", e.g. widgets displaying
/// each feature, based on these features actual metadata.
/// Hence it bridges the gap between InstantSonicView specific features
/// management and implementation details such as links with UI etc.
class MetersManager : public juce::Component,
                      public juce::ChangeListener {
 public:
  explicit MetersManager(
    const std::array<FeatureMeta, kAvailableDescriptorsCount>& params);
  ~MetersManager();

  void paint(juce::Graphics& g);

  // Overrides from inherited classes
  void changeListenerCallback(juce::ChangeBroadcaster *source);

 private:
  /// @brief Helper for retrieving plugin editor
  InstantSonicViewAudioProcessorEditor& getEditor(void) const;

  juce::OwnedArray<FeatureMeter> widgets_;

  /// @brief Common widget width
  static const int kWidgetWidth = 60;
  /// @brief Common widget height
  static const int kWidgetHeight = 60;
  /// @brief Margin (vertical & horizontal) between widgets
  static const int kWidgetMargin = 10;
  /// @brief Height of each widgets column
  static const int kColumnHeight = 250;
  /// @brief Width of each widgets column
  static const int kColumnWidth = 200;
};

#endif  // INSTANTSONICVIEW_IMPLEMENTATION_COMMON_METERSMANAGER_H_
