/// @filename Bridge.h
/// @brief InstantSonicView Bridge
/// @author gm
/// @copyright gm 2014
///
/// This file is part of InstantSonicView
///
/// InstantSonicView is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// InstantSonicView is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with InstantSonicView.  If not, see <http://www.gnu.org/licenses/>.


// This file is NOT generated by Juce (at least not after the first time),
// That's why we apply our coding style here


#ifndef INSTANTSONICVIEW_IMPLEMENTATION_COMMON_BRIDGE_H_
#define INSTANTSONICVIEW_IMPLEMENTATION_COMMON_BRIDGE_H_

#include "JuceHeader.h"

#include "externals/chartreuse/chartreuse/src/interface/analyzer.h"

/// @brief Bridge
///
/// Handles processing stuff; may use multithreading in order to do it.
class Bridge : public juce::Thread {
 public:
  Bridge();
  ~Bridge();

  // Inherited from parent
  virtual void run();

  void FeedData(const float* const data, const unsigned int data_length);
  float GetFeatureValue(const unsigned int feature_idx) const;

 private:
  const float* data_;
  unsigned int data_length_;
  bool done_;

  float features_value_[chartreuse::interface::kAvailableDescriptorsCount * 11];

  chartreuse::interface::Analyzer analyzer_;

  JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(Bridge)
};

#endif  // INSTANTSONICVIEW_IMPLEMENTATION_COMMON_BRIDGE_H_
