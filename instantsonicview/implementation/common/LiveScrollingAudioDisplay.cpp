/// @filename LiveScrollingAudioDisplay.cpp
/// @brief InstantSonicView meter widgets manager
/// @author gm
/// @copyright gm 2014
///
/// This file is part of InstantSonicView
///
/// InstantSonicView is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// InstantSonicView is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with InstantSonicView.  If not, see <http://www.gnu.org/licenses/>.


// This file is NOT generated by Juce (at least not after the first time),
// That's why we apply our coding style here

#include "instantsonicview/implementation/common/LiveScrollingAudioDisplay.h"

#include "instantsonicview/implementation/plugin/vst/PluginProcessor.h"

LiveScrollingAudioDisplay::LiveScrollingAudioDisplay()
    : nextSample(0),
      subSample(0),
      accumulator(0.0f) {
  setOpaque(true);
  clear();
  startTimer(1000 / 75); // use a timer to keep repainting this component
}

void LiveScrollingAudioDisplay::ProcessAudio(const float* audio_data,
                                             unsigned int samples_count) {
  assert(audio_data != nullptr);
  for (unsigned int i = 0; i < samples_count; ++i) {
    float inputSample(0.0f);
    inputSample += std::abs(audio_data[i]);  // find the sum of all the channels
    pushSample (10.0f * inputSample); // boost the level to make it more easily visible.
  }
}

void LiveScrollingAudioDisplay::clear() {
  zeromem (samples, sizeof (samples));
  accumulator = 0.0f;
  subSample = 0;
}

void LiveScrollingAudioDisplay::paint (Graphics& g) {
  g.fillAll (Colours::black);

  const float midY = getHeight() * 0.5f;
  int samplesAgo((nextSample + numElementsInArray (samples) - 1));

  RectangleList<float> waveform;

  for (int x = jmin (getWidth(), (int) numElementsInArray (samples)); --x >= 0;) {
    const float sampleSize(midY * samples [samplesAgo-- % numElementsInArray (samples)]);
    waveform.addWithoutMerging (Rectangle<float> ((float) x, midY - sampleSize, 1.0f, sampleSize * 2.0f));
  }

  g.setColour (Colours::lightgreen);
  g.fillRectList (waveform);
}

void LiveScrollingAudioDisplay::timerCallback() {
  repaint();
}

void LiveScrollingAudioDisplay::pushSample (const float newSample) {
  accumulator += newSample;

  if (subSample == 0) {
    const int inputSamplesPerPixel(200);

    samples[nextSample] = accumulator / inputSamplesPerPixel;
    nextSample = (nextSample + 1) % numElementsInArray (samples);
    subSample = inputSamplesPerPixel;
    accumulator = 0;
  } else {
    --subSample;
  }
}
